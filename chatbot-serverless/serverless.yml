service: aumigo-chatbot
useDotenv: true

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  profile: ${env:PROFILE}
  environment:
    BUCKET_NAME: ${env:S3_BUCKET_NAME}
    DYNAMODB_TABLE_USERS: ${env:DYNAMODB_TABLE_USERS}
    DYNAMODB_TABLE_PETS: ${env:DYNAMODB_TABLE_PETS}
    DYNAMODB_TABLE_REQUEST_ADOPT: ${env:DYNAMODB_TABLE_REQUEST_ADOPT}
    # Insira o nome de um bucket AWS em um arquivo .env

  iamRoleStatements: # Permissões IAM
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${env:S3_BUCKET_NAME}/*
    - Effect: Allow
      Action:
        - rekognition:DetectFaces
        - rekognition:DetectLabels
      Resource: "*" # Permissão para usar o Rekognition
    - Effect: "Allow"
      Action:
        - "bedrock:InvokeModel"
        - "bedrock:InvokeModelWithResponseStream"
      Resource: "*" # Permissão para usar o bedrock
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
      Resource: "*" # Permissão para usar o DynamoDB
    - Effect: Allow
      Action:
        - polly:SynthesizeSpeech
      Resource: "*" # Permissão para usar o Polly

functions:
  lex_handler:
    handler: handler.lex_handler

  geral_handler:
    handler: handler.geral_handler

  GetPets:
    handler: handler.apiGetPets
    events:
      - http:
          path: pets
          method: get
          cors: true

  PostPets:
    handler: handler.apiPostPets
    events:
      - http:
          path: pets
          method: post
          cors: true

  getAdoptSolicitations:
    handler: handler.apiGetAdoptSolicitations
    events:
      - http:
          path: adopt-solicitations
          method: get
          cors: true


resources:
  Resources:
    BucketS3:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:S3_BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_TABLE_USERS}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: phone
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: PhoneIndex
            KeySchema:
              - AttributeName: phone
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    DynamoDBTable2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_TABLE_PETS}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: nome
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: NameIndex
            KeySchema:
              - AttributeName: nome
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    DynamoDBTable3:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMODB_TABLE_REQUEST_ADOPT}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref BucketS3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${env:S3_BUCKET_NAME}/*"

plugins:
  - serverless-dotenv-plugin